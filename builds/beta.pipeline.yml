trigger:
  batch: true
  branches:
    include:
      - release/*

pr: none

variables:
  - group: dev-build
  - group: packages
  - name: WinPool
    value: 'windows-2022'
  - name: LinuxPool
    value: 'ubuntu-20.04'

pool:
  vmImage: $(WinPool)

stages:
  - template: 'templates/test.stage.yml'

  - stage: build_artifacts
    dependsOn: test_stage
    condition: succeeded()
    displayName: 'Build artifacts'
    jobs:
    - template: docker-containers/win.pipeline.yml
    - template: docker-containers/linux.pipeline.yml
    - template: docker-containers/arm64.pipeline.yml
    - template: docker-containers/arm.pipeline.yml
    - template: debian-x64/build.pipeline.yml
    - template: fedora-x64/build.pipeline.yml
    - template: linux-arm/build.pipeline.yml
    - template: linux-arm-x64/build.pipeline.yml
    - template: ubuntu-x64/build.pipeline.yml
    - template: win-x64/build.pipeline.yml
    - template: windows-installer/build.pipeline.yml

  - stage: docker_publish
    dependsOn: 
      - build_artifacts
      - test_stage
    condition: succeeded()
    displayName: 'Publish Docker artifacts'
    jobs:
    - template: 'docker-containers/publishing/beta.publish.yml'

  - stage: github_publish
    dependsOn: 
      - build_artifacts
      - test_stage
    condition: succeeded()
    displayName: 'Publish GitHub artifacts'
    jobs:
    - job:
      displayName: 'Create GitHub Releases'
      steps:
        - template: 'templates/download.artifact.yml'
          parameters:
            systemName: Debian
            artifactName: EmbyStat-$(package.debian-x64)-v$(Build.BuildNumber)
        - template: 'templates/download.artifact.yml'
          parameters:
            systemName: Fedora
            artifactName: EmbyStat-$(package.fedora-x64)-v$(Build.BuildNumber)
        - template: 'templates/download.artifact.yml'
          parameters:
            systemName: Linux ARM
            artifactName: EmbyStat-$(package.linux-arm)-v$(Build.BuildNumber)
        - template: 'templates/download.artifact.yml'
          parameters:
            systemName: Linux ARM64
            artifactName: EmbyStat-$(package.linux-arm-x64)-v$(Build.BuildNumber)
        - template: 'templates/download.artifact.yml'
          parameters:
            systemName: Ubuntu
            artifactName: EmbyStat-$(package.ubuntu-x64)-v$(Build.BuildNumber)
        - template: 'templates/download.artifact.yml'
          parameters:
            systemName: Windows x64
            artifactName: EmbyStat-$(package.win10-x64)-v$(Build.BuildNumber)
        - template: 'templates/download.artifact.yml'
          parameters:
            systemName: Windows Installer
            artifactName: EmbyStat-installer-win-x64-v$(Build.BuildNumber)
        - task: ZipDirectory@1
          displayName: Creating zip files
          inputs:
            ItemSpec: |
              $(System.ArtifactsDirectory)/EmbyStat-$(package.debian-x64)-v$(Build.BuildNumber)
              $(System.ArtifactsDirectory)/EmbyStat-$(package.fedora-x64)-v$(Build.BuildNumber)
              $(System.ArtifactsDirectory)/EmbyStat-$(package.linux-arm)-v$(Build.BuildNumber)
              $(System.ArtifactsDirectory)/EmbyStat-$(package.linux-arm-x64)-v$(Build.BuildNumber)
              $(System.ArtifactsDirectory)/EmbyStat-$(package.ubuntu-x64)-v$(Build.BuildNumber)
              $(System.ArtifactsDirectory)/EmbyStat-$(package.win10-x64)-v$(Build.BuildNumber)
        - task: GitHubRelease@1
          displayName: 'Create GitHub release'
          inputs:
            gitHubConnection: 'mregniGitHubConnection'
            repositoryName: 'mregni/EmbyStat'
            action: 'create'
            target: '$(Build.SourceVersion)'
            tagSource: 'gitTag'
            tagPattern: '$(Build.BuildNumber)'
            title: 'v$(Build.BuildNumber)'
            releaseNotesSource: 'inline'
            releaseNotesInline: '### Changes'
            assets: |
              $(System.ArtifactsDirectory)/**/*.zip
              $(System.ArtifactsDirectory)/**/EmbyStat_*_windows-x64.exe
            isPreRelease: true
            addChangeLog: false
  - stage: rollbar
    dependsOn: 
      - github_publish
      - docker_publish
    jobs:
      - job: rollbar_publish
        displayName: 'Publish info to Rollbar'
        condition: succeeded()
        steps:
          - powershell: |
              $environment = 'beta'
              $postParams = @{
                  access_token="$(rollbar.key)";
                  environment="$environment";
                  revision="$(Build.BuildNumber)";
                  local_username="MikhaÃ«l Regni";
                  status="succeeded";
                }
                Invoke-WebRequest -Uri https://api.rollbar.com/api/1/deploy -Method POST -UseBasicParsing -Body $postParams
            displayName: 'Publishing deploy on Rollbar'






// <auto-generated />
using System;
using EmbyStat.Core.DataStore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmbyStat.Core.DataStore.Migrations.Sqlite
{
    [DbContext(typeof(EsDbContext))]
    [Migration("20230110154408_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Device", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppName")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppVersion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastActivity")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.EmbyStatUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("_refreshToken")
                        .HasColumnType("TEXT")
                        .HasColumnName("RefreshTokens");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Events.MediaPlay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AudioChannelLayout")
                        .HasColumnType("TEXT");

                    b.Property<string>("AudioCodec")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AudioSampleRate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Decoder")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("DecoderIsHardware")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DecoderMediaType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Encoder")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("EncoderIsHardware")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EncoderMediaType")
                        .HasColumnType("TEXT");

                    b.Property<long>("EndPositionTicks")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayMethod")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.Property<long>("StartPositionTicks")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Stop")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubtitleCodec")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubtitleDisplayLanguage")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubtitleLanguage")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubtitleProtocol")
                        .HasColumnType("TEXT");

                    b.Property<string>("TranscodeAudioCodec")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TranscodeAverageCpuUsage")
                        .HasColumnType("REAL");

                    b.Property<double?>("TranscodeCurrentCpuUsage")
                        .HasColumnType("REAL");

                    b.Property<string>("TranscodeReasons")
                        .HasColumnType("TEXT");

                    b.Property<string>("TranscodeSubProtocol")
                        .HasColumnType("TEXT");

                    b.Property<string>("TranscodeVideoCodec")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<double>("WatchedPercentage")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("MediaPlays");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Events.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppIconUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Client")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Protocol")
                        .HasColumnType("TEXT");

                    b.Property<string>("RemoteEndPoint")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.FilterValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Field")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_Values")
                        .HasColumnType("TEXT")
                        .HasColumnName("Values");

                    b.HasKey("Id");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Helpers.MediaPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShowId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ShowId");

                    b.ToTable("MediaPerson");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double?>("CurrentProgressPercentage")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Trigger")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78bc2bf0-abd9-48ef-aeff-9c396d644f2a"),
                            CurrentProgressPercentage = 0.0,
                            Description = "UPDATE-CHECKERDESCRIPTION",
                            State = 0,
                            Title = "UPDATE-CHECKER",
                            Trigger = "0 */12 * * *"
                        },
                        new
                        {
                            Id = new Guid("41e0bf22-1e6b-4f5d-90be-ec966f746a2f"),
                            CurrentProgressPercentage = 0.0,
                            Description = "SYSTEM-SYNCDESCRIPTION",
                            State = 0,
                            Title = "SYSTEM-SYNC",
                            Trigger = "0 2 * * *"
                        },
                        new
                        {
                            Id = new Guid("be68900b-ee1d-41ef-b12f-60ef3106052e"),
                            CurrentProgressPercentage = 0.0,
                            Description = "SHOW-SYNCDESCRIPTION",
                            State = 0,
                            Title = "SHOW-SYNC",
                            Trigger = "0 3 * * *"
                        },
                        new
                        {
                            Id = new Guid("ce1fbc9e-21ee-450b-9cdf-58a0e17ea98e"),
                            CurrentProgressPercentage = 0.0,
                            Description = "PINGDESCRIPTION",
                            State = 0,
                            Title = "PING",
                            Trigger = "*/5 * * * *"
                        },
                        new
                        {
                            Id = new Guid("b109ca73-0563-4062-a3e2-f7e6a00b73e9"),
                            CurrentProgressPercentage = 0.0,
                            Description = "DATABASE-CLEANUPDESCRIPTION",
                            State = 0,
                            Title = "DATABASE-CLEANUP",
                            Trigger = "0 4 * * *"
                        },
                        new
                        {
                            Id = new Guid("c40555dc-ea57-4c6e-a225-905223d31c3c"),
                            CurrentProgressPercentage = 0.0,
                            Description = "MOVIE-SYNCDESCRIPTION",
                            State = 0,
                            Title = "MOVIE-SYNC",
                            Trigger = "0 2 * * *"
                        });
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = "e1940bfd-00c4-46f9-b9ac-a87a5d92e8ca",
                            Code = "da-DK",
                            Name = "Dansk"
                        },
                        new
                        {
                            Id = "c9df5e5c-75f3-46c2-8095-97fde33531d8",
                            Code = "de-DE",
                            Name = "Deutsch"
                        },
                        new
                        {
                            Id = "d6401f6b-becf-49e2-b82e-1018b3bf607f",
                            Code = "el-GR",
                            Name = "Ελληνικά"
                        },
                        new
                        {
                            Id = "62fe1b5e-3328-450b-b24b-fa16bea58870",
                            Code = "en-US",
                            Name = "English"
                        },
                        new
                        {
                            Id = "c0a60a3b-282e-46f5-aa7f-661c88f2edb0",
                            Code = "es-ES",
                            Name = "Español"
                        },
                        new
                        {
                            Id = "91cca672-af55-4d55-899a-798826a43773",
                            Code = "fi-FI",
                            Name = "Suomi"
                        },
                        new
                        {
                            Id = "99142c2f-379e-4a25-879b-ecfe25ee9e7c",
                            Code = "fr-FR",
                            Name = "Français"
                        },
                        new
                        {
                            Id = "a48a2ef9-3b64-4069-8e31-252abb6d07a3",
                            Code = "hu-HU",
                            Name = "Magyar"
                        },
                        new
                        {
                            Id = "282182b9-9332-4266-a093-5ff5b7f927a9",
                            Code = "it-IT",
                            Name = "Italiano"
                        },
                        new
                        {
                            Id = "082d8aaf-f86a-4401-bf0f-c315b3c9d904",
                            Code = "nl-NL",
                            Name = "Nederlands"
                        },
                        new
                        {
                            Id = "d8b0ae7b-9ba7-4a51-9d7c-94402b51265d",
                            Code = "no-NO",
                            Name = "Norsk"
                        },
                        new
                        {
                            Id = "f3966f43-3ec6-456e-850f-a2ebfc0b539b",
                            Code = "pl-PL",
                            Name = "Polski"
                        },
                        new
                        {
                            Id = "b21074db-74b9-4e24-8867-34e82c265256",
                            Code = "pt-BR",
                            Name = "Brasileiro"
                        },
                        new
                        {
                            Id = "490c1cb5-b711-4514-aa97-d22ddff2b2fa",
                            Code = "pt-PT",
                            Name = "Português"
                        },
                        new
                        {
                            Id = "6b103b14-20d1-49c0-b7ce-8d701399b64d",
                            Code = "ro-RO",
                            Name = "Românesc"
                        },
                        new
                        {
                            Id = "3e8d27e9-e314-4d57-967f-cf5d84144acf",
                            Code = "sv-SE",
                            Name = "Svenska"
                        },
                        new
                        {
                            Id = "97616a9b-60f9-407a-9a87-b4518da5e5f4",
                            Code = "zh-CN",
                            Name = "简体中文"
                        });
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Library", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Primary")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.LibrarySyncType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("TEXT");

                    b.Property<string>("LibraryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SyncType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("LibrarySyncTypes");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.MediaServerInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CachePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanLaunchWebBrowser")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanSelfRestart")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanSelfUpdate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HardwareAccelerationRequiresPremiere")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasPendingRestart")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasUpdateAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HttpServerPortNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HttpsPortNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InternalMetadataPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemsByNamePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperatingSystemDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProgramDataPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SupportsAutoRunAtStartup")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SupportsHttps")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SupportsLibraryMonitor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SystemUpdateLevel")
                        .HasColumnType("TEXT");

                    b.Property<string>("TranscodingTempPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.Property<string>("WanAddress")
                        .HasColumnType("TEXT");

                    b.Property<int>("WebSocketPortNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MediaServerInfo");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.MediaServerStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("MissedPings")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MediaServerStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e55668a1-6a81-47ba-882d-738347e7e9cd"),
                            MissedPings = 0
                        });
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.MediaServerUserView", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EpisodeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastPlayedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MediaType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "MediaId");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MovieId");

                    b.ToTable("MediaServerUserViews");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Movies.Movie", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Banner")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CommunityRating")
                        .HasColumnType("TEXT");

                    b.Property<string>("Container")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("IMDB")
                        .HasColumnType("TEXT");

                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficialRating")
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PremiereDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Primary")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProductionYear")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RunTimeTicks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SortName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TMDB")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TVDB")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Thumb")
                        .HasColumnType("TEXT");

                    b.Property<int>("Video3DFormat")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommunityRating");

                    b.HasIndex("LibraryId");

                    b.HasIndex("Logo");

                    b.HasIndex("Name");

                    b.HasIndex("Primary");

                    b.HasIndex("RunTimeTicks");

                    b.HasIndex("SortName");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Primary")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.PluginInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Plugins");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Shows.Episode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Banner")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CommunityRating")
                        .HasColumnType("TEXT");

                    b.Property<string>("Container")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<float?>("DvdEpisodeNumber")
                        .HasColumnType("REAL");

                    b.Property<int?>("DvdSeasonNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IMDB")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IndexNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IndexNumberEnd")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Logo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficialRating")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PremiereDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Primary")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProductionYear")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RunTimeTicks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SeasonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SortName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TMDB")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TVDB")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Thumb")
                        .HasColumnType("TEXT");

                    b.Property<int>("Video3DFormat")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Shows.Season", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Banner")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IndexNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IndexNumberEnd")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Logo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PremiereDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Primary")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProductionYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShowId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SortName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Thumb")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ShowId");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Shows.Show", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Banner")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CommunityRating")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CumulativeRunTimeTicks")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ExternalSynced")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IMDB")
                        .HasColumnType("TEXT");

                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficialRating")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PremiereDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Primary")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProductionYear")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RunTimeTicks")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SizeInMb")
                        .HasColumnType("REAL");

                    b.Property<string>("SortName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TMDB")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TVDB")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Thumb")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommunityRating");

                    b.HasIndex("LibraryId");

                    b.HasIndex("Logo");

                    b.HasIndex("Name");

                    b.HasIndex("Primary");

                    b.HasIndex("RunTimeTicks");

                    b.HasIndex("SortName");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.StatisticOld", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CalculationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsValid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JsonResult")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Statistics.StatisticCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CardType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UniqueType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("StatisticCards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bded12ef-e42c-403f-991b-5ec13b73999c"),
                            CardType = 0,
                            Type = 0,
                            UniqueType = 0
                        },
                        new
                        {
                            Id = new Guid("09dec73b-09e5-4fe4-a832-a406c6a2e092"),
                            CardType = 0,
                            Type = 0,
                            UniqueType = 1
                        },
                        new
                        {
                            Id = new Guid("8ba55ff0-5207-49ba-b2a6-e8d2245b3bdb"),
                            CardType = 0,
                            Type = 0,
                            UniqueType = 2
                        },
                        new
                        {
                            Id = new Guid("8bc37492-b276-4753-8a9a-7ce79b87751d"),
                            CardType = 0,
                            Type = 0,
                            UniqueType = 3
                        },
                        new
                        {
                            Id = new Guid("14d27cf8-99b6-4a7f-949d-31517326fd8e"),
                            CardType = 0,
                            Type = 0,
                            UniqueType = 4
                        },
                        new
                        {
                            Id = new Guid("79aa2d55-fd78-41ff-b57f-1eee65f66630"),
                            CardType = 0,
                            Type = 0,
                            UniqueType = 5
                        },
                        new
                        {
                            Id = new Guid("34666222-cb3f-47f9-a19b-afe3a804bee6"),
                            CardType = 0,
                            Type = 0,
                            UniqueType = 6
                        },
                        new
                        {
                            Id = new Guid("7f98a5e3-6f58-4715-ba7e-1584fd885f54"),
                            CardType = 0,
                            Type = 0,
                            UniqueType = 7
                        },
                        new
                        {
                            Id = new Guid("7e34121e-5df0-43d9-880a-32b4e4a871c7"),
                            CardType = 0,
                            Type = 0,
                            UniqueType = 8
                        },
                        new
                        {
                            Id = new Guid("4845db46-5534-8ed8-85b5-1b0c7458c57e"),
                            CardType = 0,
                            Type = 0,
                            UniqueType = 9
                        },
                        new
                        {
                            Id = new Guid("ff59deb6-c924-4d1c-8e8a-2d7285eed16d"),
                            CardType = 1,
                            Type = 0,
                            UniqueType = 10
                        },
                        new
                        {
                            Id = new Guid("54b66037-2f79-4ad9-9185-25a2d22d32bc"),
                            CardType = 1,
                            Type = 0,
                            UniqueType = 11
                        },
                        new
                        {
                            Id = new Guid("4c499011-a730-4425-9a29-2b54a459a6f6"),
                            CardType = 1,
                            Type = 0,
                            UniqueType = 12
                        },
                        new
                        {
                            Id = new Guid("37228821-9e10-4c18-8fa6-54671e3d6321"),
                            CardType = 1,
                            Type = 0,
                            UniqueType = 13
                        },
                        new
                        {
                            Id = new Guid("d1ce35dd-6fcd-4ded-b673-b072a6cda3b1"),
                            CardType = 1,
                            Type = 0,
                            UniqueType = 14
                        },
                        new
                        {
                            Id = new Guid("55094d0a-8628-4dd7-9b76-ecef09039f51"),
                            CardType = 1,
                            Type = 0,
                            UniqueType = 15
                        },
                        new
                        {
                            Id = new Guid("23a066fd-986a-40e1-acc6-e7f074bb6e8f"),
                            CardType = 1,
                            Type = 0,
                            UniqueType = 16
                        },
                        new
                        {
                            Id = new Guid("7724c480-05d6-4ac1-a3d2-a2c828774484"),
                            CardType = 1,
                            Type = 0,
                            UniqueType = 17
                        },
                        new
                        {
                            Id = new Guid("593e9198-7a63-45a0-b77b-718de127ef58"),
                            CardType = 2,
                            Type = 0,
                            UniqueType = 18
                        },
                        new
                        {
                            Id = new Guid("668c3a84-5e04-42e1-8e72-4b2d341f88ef"),
                            CardType = 2,
                            Type = 0,
                            UniqueType = 19
                        },
                        new
                        {
                            Id = new Guid("b0a5db94-e6c7-45d4-abec-c2caa8576f22"),
                            CardType = 2,
                            Type = 0,
                            UniqueType = 20
                        },
                        new
                        {
                            Id = new Guid("90542574-f6df-4c08-8ed0-70f63c01f035"),
                            CardType = 2,
                            Type = 0,
                            UniqueType = 21
                        },
                        new
                        {
                            Id = new Guid("9c65c3cf-4d2b-4b4f-947a-4b33482508f6"),
                            CardType = 4,
                            Type = 0,
                            UniqueType = 22
                        },
                        new
                        {
                            Id = new Guid("8ed8db46-5534-4845-85b5-1b0c7458c57e"),
                            CardType = 4,
                            Type = 0,
                            UniqueType = 23
                        },
                        new
                        {
                            Id = new Guid("90adfb53-285a-4073-a05d-95a2b70bb42a"),
                            CardType = 0,
                            Type = 1,
                            UniqueType = 24
                        },
                        new
                        {
                            Id = new Guid("3f3bd838-7c6e-405f-99e5-4219218fce21"),
                            CardType = 0,
                            Type = 1,
                            UniqueType = 25
                        },
                        new
                        {
                            Id = new Guid("2abe896e-e405-40d4-a714-f47784cdc8d5"),
                            CardType = 0,
                            Type = 1,
                            UniqueType = 26
                        },
                        new
                        {
                            Id = new Guid("24e710b9-0804-43aa-8eab-8e789d7de3c7"),
                            CardType = 0,
                            Type = 1,
                            UniqueType = 27
                        },
                        new
                        {
                            Id = new Guid("39ec1232-d338-445d-bdfb-fe409685ea83"),
                            CardType = 0,
                            Type = 1,
                            UniqueType = 28
                        },
                        new
                        {
                            Id = new Guid("0fe36820-4b06-4aa2-975c-61dba003d056"),
                            CardType = 0,
                            Type = 1,
                            UniqueType = 29
                        },
                        new
                        {
                            Id = new Guid("0664159c-25e7-4ed0-b1ee-73b2b5e4984d"),
                            CardType = 0,
                            Type = 1,
                            UniqueType = 30
                        },
                        new
                        {
                            Id = new Guid("87d8ff0b-55a1-46b2-b6f9-b632d7121961"),
                            CardType = 0,
                            Type = 1,
                            UniqueType = 31
                        },
                        new
                        {
                            Id = new Guid("1f33ccfe-1658-4679-9cf2-b4b689d3f381"),
                            CardType = 0,
                            Type = 1,
                            UniqueType = 32
                        },
                        new
                        {
                            Id = new Guid("58cbdff6-2444-41ca-9fbb-a82e18f447a9"),
                            CardType = 0,
                            Type = 1,
                            UniqueType = 33
                        },
                        new
                        {
                            Id = new Guid("663b55b4-f83e-40ec-bc15-a025d72b730d"),
                            CardType = 1,
                            Type = 1,
                            UniqueType = 34
                        },
                        new
                        {
                            Id = new Guid("03620638-bb90-416b-a232-f2e0608befc6"),
                            CardType = 1,
                            Type = 1,
                            UniqueType = 35
                        },
                        new
                        {
                            Id = new Guid("b6068b78-bdf2-47be-a154-b88b4ce04fc3"),
                            CardType = 1,
                            Type = 1,
                            UniqueType = 36
                        },
                        new
                        {
                            Id = new Guid("4399c72b-dccd-4fa8-934a-c62a51001f59"),
                            CardType = 1,
                            Type = 1,
                            UniqueType = 37
                        },
                        new
                        {
                            Id = new Guid("6c4f64ab-2a4f-41ce-94fe-d9a09fc6ca10"),
                            CardType = 1,
                            Type = 1,
                            UniqueType = 38
                        },
                        new
                        {
                            Id = new Guid("ae4107f9-9bfd-4f50-8301-56726e6c08d9"),
                            CardType = 1,
                            Type = 1,
                            UniqueType = 39
                        },
                        new
                        {
                            Id = new Guid("1d1c1782-282c-49bd-b34f-dc4e1673ce0e"),
                            CardType = 1,
                            Type = 1,
                            UniqueType = 40
                        },
                        new
                        {
                            Id = new Guid("5e70e8a0-699c-4a2f-81ce-b1feb79d09e0"),
                            CardType = 1,
                            Type = 1,
                            UniqueType = 41
                        },
                        new
                        {
                            Id = new Guid("7d9a181c-7df8-4b0c-9f55-65ea77465398"),
                            CardType = 2,
                            Type = 1,
                            UniqueType = 42
                        },
                        new
                        {
                            Id = new Guid("3d4f964b-3ce7-4a5c-ae44-fbc5f21f5be9"),
                            CardType = 2,
                            Type = 1,
                            UniqueType = 43
                        },
                        new
                        {
                            Id = new Guid("8f55410d-681e-4b7d-9118-5cca62bf6b2c"),
                            CardType = 2,
                            Type = 1,
                            UniqueType = 44
                        },
                        new
                        {
                            Id = new Guid("859203d1-2ab6-4a3e-9665-4e55dae68e08"),
                            CardType = 2,
                            Type = 1,
                            UniqueType = 45
                        },
                        new
                        {
                            Id = new Guid("a8180a05-3994-4792-ab36-e71f8fa72c8d"),
                            CardType = 2,
                            Type = 1,
                            UniqueType = 46
                        },
                        new
                        {
                            Id = new Guid("f4cfda68-77ad-417a-b042-da166ab20e42"),
                            CardType = 4,
                            Type = 1,
                            UniqueType = 47
                        },
                        new
                        {
                            Id = new Guid("8a851cd0-d1ea-4b8b-a3ca-91f411bbcf91"),
                            CardType = 4,
                            Type = 1,
                            UniqueType = 48
                        },
                        new
                        {
                            Id = new Guid("d1ea1cd0-8a85-4b8b-a3ca-91f411bbcf91"),
                            CardType = 3,
                            Type = 1,
                            UniqueType = 49
                        });
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Statistics.StatisticPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CalculationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StatisticPages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Name = "MENU.MOVIES"
                        },
                        new
                        {
                            Id = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Name = "MENU.SHOWS"
                        });
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Statistics.StatisticPageCard", b =>
                {
                    b.Property<Guid>("StatisticCardId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StatisticPageId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("StatisticCardId", "StatisticPageId");

                    b.HasIndex("StatisticPageId");

                    b.ToTable("StatisticPageCards");

                    b.HasData(
                        new
                        {
                            StatisticCardId = new Guid("bded12ef-e42c-403f-991b-5ec13b73999c"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 0
                        },
                        new
                        {
                            StatisticCardId = new Guid("09dec73b-09e5-4fe4-a832-a406c6a2e092"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 1
                        },
                        new
                        {
                            StatisticCardId = new Guid("8ba55ff0-5207-49ba-b2a6-e8d2245b3bdb"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 2
                        },
                        new
                        {
                            StatisticCardId = new Guid("8bc37492-b276-4753-8a9a-7ce79b87751d"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 3
                        },
                        new
                        {
                            StatisticCardId = new Guid("14d27cf8-99b6-4a7f-949d-31517326fd8e"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 4
                        },
                        new
                        {
                            StatisticCardId = new Guid("79aa2d55-fd78-41ff-b57f-1eee65f66630"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 5
                        },
                        new
                        {
                            StatisticCardId = new Guid("34666222-cb3f-47f9-a19b-afe3a804bee6"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 6
                        },
                        new
                        {
                            StatisticCardId = new Guid("7f98a5e3-6f58-4715-ba7e-1584fd885f54"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 7
                        },
                        new
                        {
                            StatisticCardId = new Guid("7e34121e-5df0-43d9-880a-32b4e4a871c7"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 8
                        },
                        new
                        {
                            StatisticCardId = new Guid("4845db46-5534-8ed8-85b5-1b0c7458c57e"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 9
                        },
                        new
                        {
                            StatisticCardId = new Guid("ff59deb6-c924-4d1c-8e8a-2d7285eed16d"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 0
                        },
                        new
                        {
                            StatisticCardId = new Guid("54b66037-2f79-4ad9-9185-25a2d22d32bc"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 1
                        },
                        new
                        {
                            StatisticCardId = new Guid("4c499011-a730-4425-9a29-2b54a459a6f6"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 2
                        },
                        new
                        {
                            StatisticCardId = new Guid("37228821-9e10-4c18-8fa6-54671e3d6321"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 3
                        },
                        new
                        {
                            StatisticCardId = new Guid("d1ce35dd-6fcd-4ded-b673-b072a6cda3b1"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 4
                        },
                        new
                        {
                            StatisticCardId = new Guid("55094d0a-8628-4dd7-9b76-ecef09039f51"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 5
                        },
                        new
                        {
                            StatisticCardId = new Guid("23a066fd-986a-40e1-acc6-e7f074bb6e8f"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 6
                        },
                        new
                        {
                            StatisticCardId = new Guid("7724c480-05d6-4ac1-a3d2-a2c828774484"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 7
                        },
                        new
                        {
                            StatisticCardId = new Guid("593e9198-7a63-45a0-b77b-718de127ef58"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 0
                        },
                        new
                        {
                            StatisticCardId = new Guid("668c3a84-5e04-42e1-8e72-4b2d341f88ef"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 1
                        },
                        new
                        {
                            StatisticCardId = new Guid("b0a5db94-e6c7-45d4-abec-c2caa8576f22"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 2
                        },
                        new
                        {
                            StatisticCardId = new Guid("90542574-f6df-4c08-8ed0-70f63c01f035"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 3
                        },
                        new
                        {
                            StatisticCardId = new Guid("9c65c3cf-4d2b-4b4f-947a-4b33482508f6"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 4
                        },
                        new
                        {
                            StatisticCardId = new Guid("8ed8db46-5534-4845-85b5-1b0c7458c57e"),
                            StatisticPageId = new Guid("85f1dad1-89ff-4f61-8225-6b0e6c7fe2cf"),
                            Order = 5
                        },
                        new
                        {
                            StatisticCardId = new Guid("90adfb53-285a-4073-a05d-95a2b70bb42a"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 0
                        },
                        new
                        {
                            StatisticCardId = new Guid("3f3bd838-7c6e-405f-99e5-4219218fce21"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 1
                        },
                        new
                        {
                            StatisticCardId = new Guid("2abe896e-e405-40d4-a714-f47784cdc8d5"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 2
                        },
                        new
                        {
                            StatisticCardId = new Guid("24e710b9-0804-43aa-8eab-8e789d7de3c7"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 3
                        },
                        new
                        {
                            StatisticCardId = new Guid("39ec1232-d338-445d-bdfb-fe409685ea83"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 4
                        },
                        new
                        {
                            StatisticCardId = new Guid("0fe36820-4b06-4aa2-975c-61dba003d056"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 5
                        },
                        new
                        {
                            StatisticCardId = new Guid("0664159c-25e7-4ed0-b1ee-73b2b5e4984d"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 6
                        },
                        new
                        {
                            StatisticCardId = new Guid("87d8ff0b-55a1-46b2-b6f9-b632d7121961"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 7
                        },
                        new
                        {
                            StatisticCardId = new Guid("1f33ccfe-1658-4679-9cf2-b4b689d3f381"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 8
                        },
                        new
                        {
                            StatisticCardId = new Guid("58cbdff6-2444-41ca-9fbb-a82e18f447a9"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 9
                        },
                        new
                        {
                            StatisticCardId = new Guid("663b55b4-f83e-40ec-bc15-a025d72b730d"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 0
                        },
                        new
                        {
                            StatisticCardId = new Guid("03620638-bb90-416b-a232-f2e0608befc6"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 1
                        },
                        new
                        {
                            StatisticCardId = new Guid("b6068b78-bdf2-47be-a154-b88b4ce04fc3"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 2
                        },
                        new
                        {
                            StatisticCardId = new Guid("4399c72b-dccd-4fa8-934a-c62a51001f59"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 3
                        },
                        new
                        {
                            StatisticCardId = new Guid("6c4f64ab-2a4f-41ce-94fe-d9a09fc6ca10"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 4
                        },
                        new
                        {
                            StatisticCardId = new Guid("ae4107f9-9bfd-4f50-8301-56726e6c08d9"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 5
                        },
                        new
                        {
                            StatisticCardId = new Guid("1d1c1782-282c-49bd-b34f-dc4e1673ce0e"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 6
                        },
                        new
                        {
                            StatisticCardId = new Guid("5e70e8a0-699c-4a2f-81ce-b1feb79d09e0"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 7
                        },
                        new
                        {
                            StatisticCardId = new Guid("7d9a181c-7df8-4b0c-9f55-65ea77465398"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 0
                        },
                        new
                        {
                            StatisticCardId = new Guid("3d4f964b-3ce7-4a5c-ae44-fbc5f21f5be9"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 1
                        },
                        new
                        {
                            StatisticCardId = new Guid("8f55410d-681e-4b7d-9118-5cca62bf6b2c"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 2
                        },
                        new
                        {
                            StatisticCardId = new Guid("859203d1-2ab6-4a3e-9665-4e55dae68e08"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 3
                        },
                        new
                        {
                            StatisticCardId = new Guid("a8180a05-3994-4792-ab36-e71f8fa72c8d"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 4
                        },
                        new
                        {
                            StatisticCardId = new Guid("f4cfda68-77ad-417a-b042-da166ab20e42"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 0
                        },
                        new
                        {
                            StatisticCardId = new Guid("8a851cd0-d1ea-4b8b-a3ca-91f411bbcf91"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 1
                        },
                        new
                        {
                            StatisticCardId = new Guid("d1ea1cd0-8a85-4b8b-a3ca-91f411bbcf91"),
                            StatisticPageId = new Guid("14928b72-f248-4442-b1ce-2c0f96eb543b"),
                            Order = 0
                        });
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Streams.AudioStream", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BitRate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelLayout")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Channels")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codec")
                        .HasColumnType("TEXT");

                    b.Property<string>("EpisodeId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SampleRate")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MovieId");

                    b.ToTable("AudioStream");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Streams.MediaSource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BitRate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Container")
                        .HasColumnType("TEXT");

                    b.Property<string>("EpisodeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("Protocol")
                        .HasColumnType("TEXT");

                    b.Property<long?>("RunTimeTicks")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SizeInMb")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MovieId");

                    b.HasIndex("SizeInMb");

                    b.ToTable("MediaSource");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Streams.SubtitleStream", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codec")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("EpisodeId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("MovieId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("Language");

                    b.HasIndex("MovieId");

                    b.ToTable("SubtitleStream");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Streams.VideoStream", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AspectRatio")
                        .HasColumnType("TEXT");

                    b.Property<float?>("AverageFrameRate")
                        .HasColumnType("REAL");

                    b.Property<int?>("BitDepth")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BitRate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Channels")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codec")
                        .HasColumnType("TEXT");

                    b.Property<string>("EpisodeId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoRange")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AverageFrameRate");

                    b.HasIndex("BitDepth");

                    b.HasIndex("Codec");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("Height");

                    b.HasIndex("MovieId");

                    b.HasIndex("VideoRange");

                    b.HasIndex("Width");

                    b.ToTable("VideoStream");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Users.MediaServerUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DisplayMissingEpisodes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableAllDevices")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableContentDeletion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableContentDownloading")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableLiveTvAccess")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableMediaConversion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnablePublicSharing")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableSubtitleDownloading")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableSubtitleManagement")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableSyncTranscoding")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasConfiguredEasyPassword")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasConfiguredPassword")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasPassword")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InvalidLoginAttemptCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHiddenFromUnusedDevices")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHiddenRemotely")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LastActivityDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("LastLoginDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PlayDefaultAudioTrack")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrimaryImageTag")
                        .HasColumnType("TEXT");

                    b.Property<int>("RemoteClientBitrateLimit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SimultaneousStreamLimit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubtitleLanguagePreference")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubtitleMode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MediaServerUsers");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<string>("GenresId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoviesId")
                        .HasColumnType("TEXT");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("GenreShow", b =>
                {
                    b.Property<string>("GenresId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShowsId")
                        .HasColumnType("TEXT");

                    b.HasKey("GenresId", "ShowsId");

                    b.HasIndex("ShowsId");

                    b.ToTable("GenreShow");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Events.MediaPlay", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Events.Session", "Session")
                        .WithMany("MediaPlays")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EmbyStat.Common.Models.Entities.Users.MediaServerUser", "User")
                        .WithMany("MediaPlays")
                        .HasForeignKey("UserId");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Helpers.MediaPerson", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Movies.Movie", "Movie")
                        .WithMany("People")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbyStat.Common.Models.Entities.Person", "Person")
                        .WithMany("MediaPeople")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbyStat.Common.Models.Entities.Shows.Show", "Show")
                        .WithMany("People")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.LibrarySyncType", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Library", "Library")
                        .WithMany("SyncTypes")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.MediaServerUserView", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Shows.Episode", null)
                        .WithMany("Views")
                        .HasForeignKey("EpisodeId");

                    b.HasOne("EmbyStat.Common.Models.Entities.Movies.Movie", null)
                        .WithMany("Views")
                        .HasForeignKey("MovieId");

                    b.HasOne("EmbyStat.Common.Models.Entities.Users.MediaServerUser", "User")
                        .WithMany("Views")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Movies.Movie", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Library", "Library")
                        .WithMany("Movies")
                        .HasForeignKey("LibraryId");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Shows.Episode", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Shows.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Shows.Season", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Shows.Show", "Show")
                        .WithMany("Seasons")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Shows.Show", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Library", "Library")
                        .WithMany("Shows")
                        .HasForeignKey("LibraryId");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Statistics.StatisticPageCard", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Statistics.StatisticCard", "StatisticCard")
                        .WithMany("PageCards")
                        .HasForeignKey("StatisticCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbyStat.Common.Models.Entities.Statistics.StatisticPage", "StatisticPage")
                        .WithMany("PageCards")
                        .HasForeignKey("StatisticPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatisticCard");

                    b.Navigation("StatisticPage");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Streams.AudioStream", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Shows.Episode", "Episode")
                        .WithMany("AudioStreams")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmbyStat.Common.Models.Entities.Movies.Movie", "Movie")
                        .WithMany("AudioStreams")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Episode");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Streams.MediaSource", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Shows.Episode", "Episode")
                        .WithMany("MediaSources")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmbyStat.Common.Models.Entities.Movies.Movie", "Movie")
                        .WithMany("MediaSources")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Episode");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Streams.SubtitleStream", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Shows.Episode", "Episode")
                        .WithMany("SubtitleStreams")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmbyStat.Common.Models.Entities.Movies.Movie", "Movie")
                        .WithMany("SubtitleStreams")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Episode");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Streams.VideoStream", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Shows.Episode", "Episode")
                        .WithMany("VideoStreams")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmbyStat.Common.Models.Entities.Movies.Movie", "Movie")
                        .WithMany("VideoStreams")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Episode");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbyStat.Common.Models.Entities.Movies.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreShow", b =>
                {
                    b.HasOne("EmbyStat.Common.Models.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbyStat.Common.Models.Entities.Shows.Show", null)
                        .WithMany()
                        .HasForeignKey("ShowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Events.Session", b =>
                {
                    b.Navigation("MediaPlays");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Library", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Shows");

                    b.Navigation("SyncTypes");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Movies.Movie", b =>
                {
                    b.Navigation("AudioStreams");

                    b.Navigation("MediaSources");

                    b.Navigation("People");

                    b.Navigation("SubtitleStreams");

                    b.Navigation("VideoStreams");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Person", b =>
                {
                    b.Navigation("MediaPeople");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Shows.Episode", b =>
                {
                    b.Navigation("AudioStreams");

                    b.Navigation("MediaSources");

                    b.Navigation("SubtitleStreams");

                    b.Navigation("VideoStreams");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Shows.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Shows.Show", b =>
                {
                    b.Navigation("People");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Statistics.StatisticCard", b =>
                {
                    b.Navigation("PageCards");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Statistics.StatisticPage", b =>
                {
                    b.Navigation("PageCards");
                });

            modelBuilder.Entity("EmbyStat.Common.Models.Entities.Users.MediaServerUser", b =>
                {
                    b.Navigation("MediaPlays");

                    b.Navigation("Views");
                });
#pragma warning restore 612, 618
        }
    }
}
